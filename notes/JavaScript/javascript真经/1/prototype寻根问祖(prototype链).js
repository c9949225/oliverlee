/*prototype不但能让对象共享自己财富，而且prototype还有寻根问祖的天性，
从而使得先辈们的遗产可以代代相传。当从一个对象那里读取属性或调用方法时，
如果该对象自身不存在这样的属性或方法，就会去自己关联的prototype对象那里寻找；
如果 prototype没有，又会去prototype自己关联的前辈prototype那里寻找，
直到找到或追溯过程结束为止。*/

// 在JavaScript内部，对象的属性和方法追溯机制是通过所谓的prototype链来实现的。
// 当用new操作符构造对象时，也会同时将构造函数的 prototype对象指派给新创建的对象，成为该对象内置的原型对象。
// 对象内置的原型对象应该是对外不可见的，尽管有些浏览器(如Firefox)可以让我们访问这个内置原型对象，
// 但并不建议这样做。内置的原型对象本身也是对象，也有自己关联的原型对象，这样就形成了所谓的原型链。

