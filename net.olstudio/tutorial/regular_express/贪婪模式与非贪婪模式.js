// 注: []:可以从中取出单个字符 
//     ():可以从中取出多个字符
//     *:匹配前面的表达0次或多次


// [\w]+ 可以从中括号中取出单个字符,重复多次
// 这里\w表示任意常规字符,那么[\w]+就表示任意长度的任意字符
var str = "<p>abcdefg</p><p>abcdefghijkl</p>";

// 一般情况下,都是贪婪匹配,加上一个?号表示非贪婪匹配

// 1, 非贪婪模式,多加一个?号
re1 = str.match(/<p>[\W\w]+?<\/p>/ig);
// 匹配到两个 返回一个数组
// re1[0] = <p>abcdefg</p>;
// re1[1] = <p>abcdefghijkl</p>;

// 2, 贪婪模式
re1=str.match(/<p>[\W\w]+<\/p>/ig);
// re1 = <p>abcdefg</p><p>abcdefghijkl</p>

// 3, 非贪婪模式,且不要<p></p>
re1=str.match(/<p>(.+?)<\/p>/i);

// 4, 贪婪模式,且不要<p></p>
re1=str.match(/<p>(.+)<\/p>/i);


//更多的情况，举例如下：
//
//    举例1：表达式 "<td>(.*)</td>" 与字符串 "<td><p>aa</p></td> <td><p>bb</p></td>" 匹配时，
//    匹配的结果是：成功；匹配到的内容是 "<td><p>aa</p></td> <td><p>bb</p></td>" 整个字符串， 
//    表达式中的 "</td>" 将与字符串中最后一个 "</td>" 匹配。
//
//    举例2：相比之下，表达式 "<td>(.*?)</td>" 匹配举例1中同样的字符串时，将只得到 "<td><p>aa</p></td>"， 
//    再次匹配下一个时，可以得到第二个 "<td><p>bb</p></td>"。


