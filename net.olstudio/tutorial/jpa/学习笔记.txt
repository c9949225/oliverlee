1-为提供前面定义的"服务接口"的实现，需要利用 Spring 2 的部分特性和支持库。当然，存在替代方法。可以用标准的 Java 数据库访问技术，
例如  JDBC，一个方法一个方法地开始实现接口。但是，看到 Spring 2 如何用 JPA 实现这一任务之后，您就会认识到，把这项工作委托给  
Spring 实际上要更容易。 

2-
Spring 框架一直通过其他对象到关系的映射（ORM）技术支持持久性，但是这类映射任务要求对第三方非标准的技术性库有相当精妙和深入的了解。
随着 JPA 的到来，大批供应商开始支持 JPA 标准，因而对非标准的第三方持久性库的支持的重要性有所降低。

JPA的特点
3-Spring 2支持JPA，这使得为关系数据库编写、读取、搜索、更新和删除对象（POJO）的烦琐工作变得透明。
可以继续使用 Java 语言面向对象的语法处理 POJO，JPA ORM 层负责数据库表的创建、查询、更新代码和删除代码。 

4-除了透明的数据库操作，Spring 2 的 JPA 支持还把各种五花八门的特定于数据库厂商的异常转换成一套定义良好的异常，使得异常处理代码大为简化。

5-可以用 Java 5 注释的形式或外部 XML 定义文件（为了与 JDK 1.4 兼容）的形式向 JPA 引擎提供映射线索。 

6-因为各种 ORM 产品和数据库都存在 JPA 实现，所以您的实现代码是可以在不同厂商的解决方案之间移植的（如果必要）。 

7-JPA 持久性是 EJB 3.0 的一部分，后者又是 Java EE 5 规范的一部分，这意味着所有兼容的 Java EE 5 服务器（商业的、开放源码的或其他）都有符合规范的实现。
这实际上就保证了在不久的将来，将有健壮、高质量的 JPA 实现可以使用。 

8-Spring DAO 实现了著名的 DAO 设计模式（请参阅 参考资料）。
在这个模式中，DAO 提供了一致的数据访问外观。通过传输对象执行数据提取和修改。DAO 封装了实际的数据源，并提供了操作传输对象的方法。 
DAO API 隐藏了操作实际数据持久性 API 调用的复杂性。（除了 JPA 之外，Spring 还支持其他 ORM 技术，例如 JDO、 Hibernate、iBATIS SQL Maps 和 Apache OJB。）。
使用 Spring 的 DAO，可以编写能够轻松适应这些持久性  API 的数据访问代码。 

9-JpaTemplate 助手类能：

    * 隐藏底层的 API 差异
    * 转换异常
    * 管理 JPA 实体管理器
    * 打包事务处理
    * 把数据访问标准化成对少数一致（跨全部 Spring DAO 实现）和定义良好的方法的访问 
    
10-要在代码中访问 JPA 功能，在构建和运行时类路径中必须有 JPA 引用实现：
   1. 在 Eclipse 中，在导航器面板中右击项目名称，并选择 Properties。
   2. 选择 Java Build Path，然后在对话框中，选择 Libraries 选项卡。
   3. 单击 Add External JARs 按钮，并确保包含了 JPA 下载的 toplink-essentials.jar。 





1-JPA需要不同的提供者
If TopLink is being used a JPA provider under Tomcat, 

2-