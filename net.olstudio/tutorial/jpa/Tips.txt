1-JPA有多种引用实现 TopLink Essentials | OpenJPA | Hibernate
TopLink Essentials 是官方的参考实现。

2-在Tomcat服务器上使用TopLink Essentials 需要更改Context的ClassLoader,Spring 提供了该类的实现。

	2.1-将toplink-essentials.jar放在$CATALINA_HOME/shared/lib folder instead of your war.
		Copy "spring-tomcat-weaver.jar" from the Spring distribution to
   		"TOMCAT_HOME/server/lib".
	2.2-<Context path="/myWebApp" docBase="/my/webApp/location">
	   		<Loader loaderClass="org.springframework.instrument.classloading.tomcat.TomcatInstrumentableClassLoader" />
		</Context>


3-持久化类的Weaving (byte-code transformation)是根据JPA 实现而不同的,
通常需要在特定的启动的时候指定特定的JVM agent。 
Spring不推荐使用Load Time Wearver,而Hibernate实现不需要。

4-LocalContainerEntityManagerFactoryBean gives full control over EntityManagerFactory configuration。
The LocalContainerEntityManagerFactoryBean will create a PersistenceUnitInfo 
based on the 
	4.1-persistence.xml file, 
	4.2-the supplied "dataSourceLookup" strategy
	4.3-the specified "loadTimeWeaver".
It is thus possible to work with custom DataSources outside of JNDI and to control the weaving process.

5-Spring provides a number of LoadTimeWeaver implementations for various environments, 
allowing ClassTransformer instances to be applied only per ClassLoader and not per VM.

6-
For environments where class instrumentation is required but are not supported by the existing LoadTimeWeaver implementations, 
a JDK agent can be the only solution. For such cases, Spring provides InstrumentationLoadTimeWeaver 
which requires a Spring-specific (but very general) VM agent (spring-agent.jar):

<bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
  <property name="loadTimeWeaver">
    <bean class="org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver"/>
  </property>
</bean>
Note that the virtual machine has to be started with the Spring agent, by supplying the following JVM options:

-javaagent:/path/to/spring-agent.jar

7-
