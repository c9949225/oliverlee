=============================================================================
每个具体工厂生产出来的具体产品根据不同工厂的不同各不相同，
但是客户使用产品的方法是一致的。
=============================================================================

象工厂模式中的有以下的四种角色：
 
抽象工厂（Abstract Factory）角色：担任这个角色的是工厂方法模式的核心，它是与应用系统商业逻辑无关的。
具体工厂（Concrete Factory）角色：这个角色直接在客户端的调用下创建产品的实例。这个角色含有选择合适的产品对象的逻辑，而这个逻辑是与应用系统的商业逻辑紧密相关的。
抽象产品（Abstract Product）角色：担任这个角色的类是工厂方法模式所创建的对象的父类，或它们共同拥有的接口。
具体产品（Concrete Product）角色：这个角色用以代表具体的产品。


抽象工厂模式就相当于创建实例对象的new，由于经常要根据类生成实例对象，抽象工厂模式也是用来创建实例对象的，
所以在需要新的事例对象时便可以考虑是否使用工厂模式。

虽然这样做可能多做一些工作，但会给你系统带来更大的可扩展性和尽量少的修改量。

   
举例来说：生产餐具和相应食物的工厂，有两个车间，其中一个车间用以生产餐具，一个车间用以生产相应的食物。

当消费者消费时，只需要向相应的具体工厂请求具体餐具和具体食物便可以使用餐具消费食物。

比如客户在得到餐具和食物之后，两者的搭配是正确的（使用汤匙喝牛奶，使用刀子切面包）。

在本例子中有3个具体工厂AKetchen， BKetchen， CKetchen，分别生产牛奶和汤匙、面包和刀、肉和叉子。

牛奶、面包和肉都实现了食物接口。

汤匙、刀和叉子都实现了餐具接口。