桥接模式属于对象结构型模式，其意图是将抽象的部分和它的实现部分分离，使他们都可以独立的变化。

当一个抽象可能有多个实现时，通常用继承来协调他们。

抽象类的定义对该抽象的接口。而具体的子类则用不同的方式加以实现，但是此方法有时不够灵活。

继承机制将抽象部分与他的实现部分固定在一起，使得难以对抽象部分和实现部分独立地进行修改、扩充和充用

实用性：
1.         你不希望在抽象和他的实现部分之间有一个固定的绑定关系，如在程序的运行时刻实现部分应该可以被选择或者切换。
2.         类的抽象以及他的视像都可以通过生成子类的方法加以扩充。
			
		        这时bridge模式使你可以对不同的抽象接口和实现部分进行组合，并对他们进行扩充。
3.         
		        对一个抽象的实现部分的修改应该对客户不产生影响，即客户的代码不需要重新编译。
4.         你想对客户完全隐藏抽象的实现部分。
5.         你想在多个实现间 共享实现，但同时要求客户并不知道这一点。

参与者:
       Abstraction:定义抽象类的接口，维护一个指向实现者(implementor)接口类型(imageImp)的指针
       RefinedAbstraction(BMPImg)：扩充由Abstraction定义的接口。
       Implementor(ImageImp):定义实现类的接口，该接口不一定要与Abstraction的接口完全一致，事实上这两个接口可以完全不同。一般来讲Implementor接口仅提供基本操作，而Abstraction则定义了这些基本操作的较高层次的操作。
       ConcreteImplementor(UnixImp)：实现ImageImp并定义它的具体实现。
       
Bridge模式的优点：
1.         分离接口和实现部分。一个实现不必不变得邦定在一个接口上。抽象类的实现可以在运行的时刻进行配置，一个对象甚至可以在运行的时候改变它的实现。
2.         提高可扩充性 你可以独立地对Abstraction和Implementor层次结构进行扩充。
3.         实现细节对客户的透明 你可以对可以隐藏实现细节。

